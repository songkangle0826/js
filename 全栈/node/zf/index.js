


3.NODE入门
	NODE本身是基于CommonJs模块化规范设计的，所以是NODE的组成
	- 内置模块：NODE天生提供给JS调取使用的
	- 第三方模块： 别人写好的，我们可以基于NPM安装使用
	- 自定义模块：自己创建一些模块

CommonJS模块化设计思想（AMD/CMD/ES6 MODULE都是模块化设计思想）
```
	1.CommonJS规定，每一个JS都是一个单独的模块（模块是私有的：里面涉及的值和变量以及函数都是私有的，和其他JS文件中的内容是不冲突的）
	2.CommonJS中可以允许模块中的方法互相的调用
		B模块中想要调取A模块中的方法
			=> A导出
			=> B导入

		[导出]
			CommonJS给每一个模块（每个js）中都设置了内置的变量/属性/方法
				module: 代笔当前模块对象 [object]
				module.exports: 模块的这个“属性”是用来导出当前模块属性和方法的【object】
				exports：是内置的一个“变量”，也就是导出当前模块属性方法的，虽然和module.exports不是一个东西，但是对应的值是同一个（module.exports=exports值都是对象）
		[导入]
			require： CommonJS提供的内置变量，用来导入模块的（其实导入的就是module.exports暴露出来的东西）：导入的值也是【onject】类型的：

	CommonJS的特点：
		1.所以代码都运行再模块作用域，不会污染全局作用域（每一个模块都是私有的，包括里面所有的东西都是私有的，不会和其他模块产生干扰）
		2.模块可以多次加载，但是只会第一次加载时运行依次，然后运行结果，要想让模块再次运行，必须清除缓存（为了保证性能，减少模块代码重复执行多次）
		3.模块加载的顺序，按照其在代码中出现的顺序
		4.CommonJS规范加载模块时同步的，也就是说，只有加载完成，才能执行后面的操作
```

/*
	案例: A/B/C三个模块
		A中有一个sum方法，实现任意数求和
		B中有一个avg方法，实现任意数求平均数（先求和再平均，B中用到A）
		C中调取B的avg，实现12，23，34，45，56，求平均数
*/

```
	require导入规则
		require('./xxx') 或者 ../xxx 再或者 /xxx 这种自己制动的路径的模式，都是为了导入自定义的模块，换句话说，想要导入自定义模块，必须加路径
		require('xxx') 首先到当前项目中的node_modules中查找是否存在这个模块，不存在找node提供的模块，再不存在，报错。

	__dirname 模块中这个内置变量是当前模块所在的决定路径(具体到盘符：物理路径；相对路径：相对于根目录的路径);
	__filename 相对于__dirname来讲，多栏模块名称

```


